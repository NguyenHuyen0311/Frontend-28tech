28tech—Javascript cơ bản (Tiết 3)
🛎️Functions (Hàm)
<1> Kiến thức tổng quan
- Là một chương trình con giúp thực thi một công việc cụ thể
- 2 loại hàm: 
+ Hàm built-in: Hàm có sẵn trong Javascript: console.log(), alert(), prompt()
+ Hàm tự định nghĩa: là hàm do chúng ta tự viết ra
- Cú pháp hàm tự định nghĩa: function temHam(thamSo1, thamSo2,…) {}
- Cú pháp gọi hàm: tenHam(doiSo1, doiSo2,…);
- Đối tượng arguments: chỉ dùng được ở trong hàm. Giả sử khi gọi hàm và truyền đối số vào thì tất cả các đối số đó sẽ được nằm trong arguments dưới dạng một mảng
- Từ khóa return: sẽ trả về kết quả nằm ở bên phải của chữ return. Những dòng code ở bên dưới return sẽ không hoạt động
- Lưu ý:
+ Nếu đặt trùng tên hàm khi ta gọi hàm thì việc gọi hàm này sẽ chạy vào hàm cuối cùng
+ Nếu một biến được định nghĩa trong function thì biến đó chỉ sử dụng được ở trong function đó thoi (kể cả biến var). Khai báo biến var trong if else thì bên ngoài vẫn gọi được 
+ Nếu hàm A nằm bên trong hàm B thì hàm A chỉ gọi được ở trong hàm B thoi, không gọi được ở bên ngoài hàm B
<2> Các loại hàm (các cách viết hàm)
* Declaration function (Hàm định nghĩa)
+ Có tính hoisting (nghĩa là gọi được hàm trước lúc khai báo hàm đó)
+ Có đối tượng arguments
+ Cú pháp: function tenHam(thamSo1, thamSo2,…) {
     // code
}
* Expression function (Hàm biểu thức)
+ Không có tính hoisting (Nếu gọi hàm trước lúc khai báo hàm thì sẽ gặp lỗi)
+ Có đối tượng arguments
+ Cú pháp: var temHam = function(thamSo1, thamSo2,…) {
     // code
}
* Arrow function (Hàm mũi tên)
+ Không có tính hoisting (Nếu gọi hàm trước lúc khai báo hàm thì sẽ gặp lỗi)
+ Cú pháp: var tenHam = (thamSo1, thamSo2,…) => {
     // code
}
+ Lưu ý: Arrow function không có đối tượng arguments. Để lấy các đối số đã truyền dưới dạng một mảng thì chúng ta sẽ sử dụng cú pháp spread
🛎️Try Catch
- Là một khối lệnh dùng để bắt lỗi chương trình
- Sử dụng try catch khi muốn chương trình không bị dừng khi một lệnh nào đó bị lỗi. Thường thì đó là những lỗi do người dùng nhập sai dữ liệu, hoặc người dùng thao tác bị sai 
- Cú pháp: 
try { 
     // Chạy vào đây đầu tiên
}
catch (error) { 
     // Nếu lỗi chạy vào đây
}
finally { 
     // Luôn luôn chạy vào đây và chạy sau cùng
}
- Các bước thực thi:
+ Bước 1: Thực hiện trong try 
+ Bước 2: Nếu trong try xuất hiện lỗi thì các câu lệnh trong try không được thực thi. Và sẽ nhảy sang catch, các câu lệnh trong catch sẽ được thực thi 
+ Bước 3: Cuối cùng nhảy xuống finally dù là lỗi hay không, finally là lựa chọn thêm không bắt buộc phải thêm vào
- Lưu ý: Nếu dùng try catch thì nếu trong try catch gặp lỗi thì các câu lệnh bên ngoài try catch vẫn chạy bình thường. Nếu không dùng try catch mà gặp phải lỗi thì các câu lệnh phía sau sẽ bị dừng
🛎️Làm việc với Object nâng cao
<1> Cách thêm 1 key mới vào object
- Cú pháp: tenObject.tenKey = value;
Hoặc: tenObject[“tenKey”] = value;
<2> Cách xoá 1 key khỏi object
- Cú pháp: delete tenObject.tenKey;
🛎️Làm việc với Array nâng cao
<1> forEach()
- Để duyệt qua mỗi phần tử của mảng và thực hiện một hành động nào đó
- Có thể thay đổi trực tiếp mảng ban đầu
- Không dùng được từ khóa return vì không trả ra 1 mảng mới mà thay đổi chính mảng hiện tại 
- Cú pháp:
arr.forEach(function (currentValue, index, array) {
     // code xử lý
});
currentValue: phần tử hiện tại đang được xử lý của array
index: chỉ số của phần tử hiện tại đang được xử lý của array
array: mảng hiện tại đang gọi hàm forEach()
<2> every()
- Kiểm tra tất cả các phần tử của một mảng thoả mãn một điều kiện gì đó
- Cú pháp:
arr.every(function (currentValue, index, array) {
       // code xử lý
});
<3> some()
- Kiểm tra chỉ cần một phần tử của một mảng thoả mãn một điều kiện gì đó là được
- Cú pháp:
arr.some(function (currentValue, index, array) {
      // code xử lý
});
<4> find()
- Tìm xem trong mảng có giá trị giống với giá trị đang cần tìm không
+ Nếu có thì trả về chính phần tử của mảng đó
+ Nếu không có thì trả về undefined
- Chỉ tìm được 1 phần tử trong mảng
- Cú pháp:
arr.find(function (currentValue, index, array) {
       // code xử lý
});
<5> filter()
- Giống hàm find()
- Tìm được nhiều nhiều phần tử trong mảng
- Trả về một mảng các phần tử đã tìm được
- Cú pháp:
arr.filter(function (currentValue, index, array) {
       // code xử lý
});
<6> map()
- Lặp qua từng phần tử của mảng và trả về một mảng mới
- Số lượng phần tử bằng mảng cũ
- Giá trị trả về được quyết định bởi từ khoá return
- Cú pháp:
arr.map(function (currentValue, index, array) {
      // code xử lý
});
<7> reduce()
- Hàm reduce() duyệt qua từng phần tử trong mảng để tính toán và trả về một giá trị cuối cùng
- Cú pháp: 
arr.reduce(function (total, currentValue, currentIndex, array) {
      // code xử lý
}, initialValue);
total: giá trị trả lại trước đó của function, chính là giá trị của lệnh return cho mỗi lần lặp (biến lưu trữ)
currentValue: giá trị hiện tại
currentIndex: chỉ mục của currentValue 
array: mảng gốc 
initialValue: giá trị khởi tạo ban đầu (không bắt buộc). Nếu được truyền vào thì initialValue sẽ được sử dụng làm giá trị ban đầu, còn không thì nó sẽ lấy giá trị của phần tử đầu tiên 
